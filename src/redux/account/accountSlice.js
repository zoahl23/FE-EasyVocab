import { createSlice } from '@reduxjs/toolkit';

const initialState = {
    isAuthenticated: false,
    isLoading: true,
    user: {
        "email": "",
        "fullName": "",
        "role": "",
        "userId": "",
        "subscriptionPlan": "",
        "subscriptionEndDate": "",
        "createdAt": "",
        "password": "",
    }
};

export const accountSlice = createSlice({
    name: 'account',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        doLoginAction: (state, action) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            state.isAuthenticated = true;
            state.isLoading = false;
            // state.user = action.payload;
            state.user = {
                email: action.payload.email,
                fullName: action.payload.fullName,
                role: action.payload.role,
                userId: action.payload.userId,
                subscriptionPlan: action.payload.subscriptionPlan,
                subscriptionEndDate: action.payload.subscriptionEndDate,
                createdAt: action.payload.createdAt,
                password: action.payload.password
            };
        },
        doGetAccountAction: (state, action) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            state.isAuthenticated = true;
            state.isLoading = false;
            // state.user = action.payload;
            state.user = {
                email: action.payload.email,
                fullName: action.payload.fullName,
                role: action.payload.role,
                userId: action.payload.userId,
                subscriptionPlan: action.payload.subscriptionPlan,
                subscriptionEndDate: action.payload.subscriptionEndDate,
                createdAt: action.payload.createdAt,
                password: action.payload.password
            };
        },
        doLogoutAction: (state) => {
            localStorage.removeItem('access_token');
            state.isAuthenticated = false;
            state.user = {
                email: "",
                fullName: "",
                role: "",
                id: "",
                subscriptionPlan: "",
                subscriptionEndDate: "",
                createdAt: "",
                password: ""
            }
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    // extraReducers: (builder) => {
    // },
});

export const { doLoginAction, doGetAccountAction, doLogoutAction } = accountSlice.actions;

export default accountSlice.reducer;